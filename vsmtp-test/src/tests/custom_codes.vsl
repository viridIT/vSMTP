/// an example with a code object accepting string interpolation.
fn retry_helo(helo) {
    object retry_helo code = `250 cannot identify with '${helo}'.` + "\r\n";
}

object deny_satan code = #{
    base: 501,
    enhanced: "4.7.1",
    text: "satan is blacklisted on this server\r\n",
};

object deny_evil code = "501 4.7.1 evil is blacklisted on this server\r\n";

#{
    helo: [
        rule "helo must be foo.bar" || {
            if ctx.helo == "foo.bar" {
                vsl::next()
            } else {
                vsl::info(retry_helo(ctx.helo));
            }
        },

        rule "helo trailing" || vsl::accept(),
    ],

    mail: [
        rule "blacklist" || {
            if ctx.mail_from.domain == "satan.org" {
                vsl::deny(deny_satan)
            } else if ctx.mail_from.domain == "evil.com" {
                vsl::deny(deny_evil)
            } else {
                vsl::next()
            }
        },

        rule "mail trailing" || vsl::accept(),
    ],
}
