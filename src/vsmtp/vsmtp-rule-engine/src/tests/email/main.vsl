/*
 * vSMTP mail transfer agent
 * Copyright (C) 2022 viridIT SAS
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see https://www.gnu.org/licenses/.
 *
*/
#{
    connect: [
        rule "fail mail_from rewrite: email not received" || {
            try {
                rewrite_mail_from("impossible@torewrite.com");
                return deny();
            } catch (err) {
                if "the field: `message` is not defined" in err {
                    return next();
                } else {
                    return deny();
                }
            }
        },

        rule "fail mail_from rewrite: bad address format" || {
            try {
                rewrite_mail_from("invalid");
                return deny();
            } catch (err) {
                if "invalid type conversion" in err { return next(); } else { return deny(); }
            }
        },

        rule "fail rcpt rewrite: 1st bad address format" || {
            try {
                rewrite_rcpt("invalid", "valid@email.com");
                return deny();
            } catch (err) {
                if "invalid type conversion" in err { return next(); } else { return deny(); }
            }
        },

        rule "fail rcpt rewrite: 2nd bad address format" || {
            try {
                rewrite_rcpt("valid@email.com", "invalid");
                return deny();
            } catch (err) {
                if "invalid type conversion" in err { return next(); } else { return deny(); }
            }
        },

        rule "unavailable mail timestamp" || {
            try {
                print(ctx().mail_timestamp);
                return deny();
            } catch (err) {
                if "the field: `mail_timestamp` is not defined" in err { return next(); } else { return deny(); }
            }
        },

        rule "unavailable message id" || {
            try {
                print(ctx().message_id);
                return deny();
            } catch (err) {
                if "the field: `message_id` is not defined" in err { return next(); } else { return deny(); }
            }
        },

        rule "trailing connect" || accept(),
    ],

    preq: [
        rule "raw=>parsed and mail_from raw" || {
            try {
                rewrite_mail_from("impossible@torewrite.com");
                return next();
            } catch (err) {
                return deny();
            }
        },

        rule "raw=>parsed and add rcpt" || {
            try {
                add_to("impossible@toadd.com");
                return next();
            } catch (err) {
                return deny();
            }
        },

        rule "raw=>parsed and remove rcpt" || {
            try {
                remove_to("impossible@toremove.com");
                return next();
            } catch (err) {
                return deny();
            }
        },

        rule "raw=>parsed and rewrite rcpt" || {
            try {
                rewrite_to("impossible@torewrite.com", "impossible@torewrite.com");
                return next();
            } catch (err) {
                return deny();
            }
        },

        rule "trailing preq" || accept(),
    ],

    postq: [
        action "printing client data" || {
            log("debug", "email received.");
            log("debug", `connexion timestamp: ${ctx().connection_timestamp}`);
            log("debug", `ip: ${ctx().client_ip}`);
            log("debug", `helo: ${ctx().helo}`);
            log("debug", `mail_from: ${ctx().mail_from}`);
            log("debug", `metadata {\n  mail timestamp: ${ctx().mail_timestamp}\n  message id: ${ctx().message_id}\n}`);

            log("trace", ctx().to_string());
            log("trace", ctx().to_debug());

            print(ctx().mail_timestamp.to_string());
            print(ctx().mail_timestamp.to_debug());
        },

        action "rewrite envelop" || {
            add_rcpt("added@rcpt.com");
            remove_rcpt("rcpt@toremove.org");
            rewrite_rcpt("rcpt@torewrite.net", "new@rcpt.net");
            rewrite_mail_from("new@mailfrom.eu");
        },

        action "rewrite to headers" || {
            add_to("other.added@rcpt.com");
            remove_to("other.rcpt@toremove.org");
            rewrite_to("other.rcpt@torewrite.net", "other.new@rcpt.net");
        },

        rule "check rewrites" || {
            if "added@rcpt.com" in ctx().rcpt
            && !("rcpt@toremove.org" in ctx().rcpt)
            && "new@rcpt.net" in ctx().rcpt
            && !("rcpt@torewrite.net" in ctx().rcpt)
            && ctx().mail_from is "new@mailfrom.eu" {
                next()
            } else {
                deny()
            }
        },

        rule "trailing postq" || accept(),
    ]
}
