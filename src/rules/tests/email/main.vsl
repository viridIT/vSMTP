#{
    connect: [
        rule "fail mail_from rewrite: email not received" || {
            try {
                vsl::rewrite_mail_from(server, "impossible@torewrite.com");
                return vsl::deny();
            } catch (err) {
                if "the email has not been received yet" in err { return vsl::next(); } else { return vsl::deny(); }
            }
        },

        rule "fail mail_from rewrite: bad address format" || {
            try {
                vsl::rewrite_mail_from(server, "invalid");
                return vsl::deny();
            } catch (err) {
                if "could not rewrite mail_from with 'invalid' because it is not valid address" in err { return vsl::next(); } else { return vsl::deny(); }
            }
        },

        rule "fail rcpt rewrite: 1st bad address format" || {
            try {
                vsl::rewrite_rcpt(server, "invalid", "valid@email.com");
                return vsl::deny();
            } catch (err) {
                if "could not rewrite address 'invalid' because it is not valid address" in err { return vsl::next(); } else { return vsl::deny(); }
            }
        },

        rule "fail rcpt rewrite: 2nd bad address format" || {
            try {
                vsl::rewrite_rcpt(server, "valid@email.com", "invalid");
                return vsl::deny();
            } catch (err) {
                if "could not rewrite address 'valid@email.com' with 'invalid' because it is not valid address" in err { return vsl::next(); } else { return vsl::deny(); }
            }
        },

        rule "unavailable mail timestamp" || {
            try {
                print(server.mail_timestamp);
                return vsl::deny();
            } catch (err) {
                if "metadata are not available in this stage" in err { return vsl::next(); } else { return vsl::deny(); }
            }
        },

        rule "unavailable message id" || {
            try {
                print(server.message_id);
                return vsl::deny();
            } catch (err) {
                if "metadata are not available in this stage" in err { return vsl::next(); } else { return vsl::deny(); }
            }
        },

        rule "unavailable mail retries" || {
            try {
                print(server.retry);
                return vsl::deny();
            } catch (err) {
                if "metadata are not available in this stage" in err { return vsl::next(); } else { return vsl::deny(); }
            }
        },

        rule "trailing" || vsl::accept(),
    ],

    preq: [
        rule "failed mail_from rewrite: email not parsed" || {
            try {
                vsl::rewrite_mail_from(server, "impossible@torewrite.com");
                return vsl::deny();
            } catch (err) {
                if "the email has not been parsed yet" in err { return vsl::next(); } else { return vsl::deny() }
            }
        },

        rule "failed add rcpt: email not yet parsed" || {
            try {
                vsl::add_rcpt(server, "impossible@toadd.com");
                return vsl::deny();
            } catch (err) {
                if "the email has not been parsed yet" in err { return vsl::next(); } else { return vsl::deny() }
            }
        },

        rule "failed remove rcpt: email not yet parsed" || {
            try {
                vsl::remove_rcpt(server, "impossible@toremove.com");
                return vsl::deny();
            } catch (err) {
                if "the email has not been parsed yet" in err { return vsl::next(); } else { return vsl::deny() }
            }
        },

        rule "failed rewrite rcpt: email not yet parsed" || {
            try {
                vsl::rewrite_rcpt(server, "impossible@torewrite.com", "impossible@torewrite.com");
                return vsl::deny();
            } catch (err) {
                if "the email has not been parsed yet" in err { return vsl::next(); } else { return vsl::deny() }
            }
        },

        rule "trailing" || vsl::accept(),
    ],

    postq: [
        action "printing client data" || {
            vsl::log("debug", "email received.");
            vsl::log("debug", `connexion timestamp: ${server.connection_timestamp}`);
            vsl::log("debug", `ip: ${server.client_addr}`);
            vsl::log("debug", `helo: ${server.helo}`);
            vsl::log("debug", `mail_from: ${server.mail_from}`);
            vsl::log("debug", `metadata {\n  mail timestamp: ${server.mail_timestamp}\n  message id: ${server.message_id}\n  retries: ${server.retry}\n}`);

            vsl::log("trace", server.to_string());
            vsl::log("trace", server.to_debug());

            print(server.mail_timestamp.to_string());
            print(server.mail_timestamp.to_debug());
        },

        action "rewrite" || {
            vsl::add_rcpt(server, "added@rcpt.com");
            vsl::remove_rcpt(server, "rcpt@toremove.org");
            vsl::rewrite_rcpt(server, "rcpt@torewrite.net", "new@rcpt.net");
            vsl::rewrite_mail_from(server, "new@mailfrom.eu");
        },

        rule "check_rewrites" || {
            if "added@rcpt.com" in server.rcpt
            && !("rcpt@toremove.org" in server.rcpt)
            && "new@rcpt.net" in server.rcpt
            && !("rcpt@torewrite.net" in server.rcpt)
            && server.mail_from is "new@mailfrom.eu" {
                vsl::next()
            } else {
                vsl::deny()
            }
        },

        rule "trailing" || vsl::accept(),
    ]
}