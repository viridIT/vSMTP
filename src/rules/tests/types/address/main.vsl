obj addr "address_obj" "add@obj.net";
obj fqdn "fqdn_obj" "obj.net";
obj regex "regex_obj" "^[a-z0-9.]+@obj.com$";
obj file:addr "file_obj" "./src/rules/tests/types/address/whitelist.txt";

obj grp "group_obj" [
    address_obj,
    regex_obj,
    obj addr "nested_address" "nested@address.com",
];

obj ident "identifier_obj" "local_part";
obj str "string_obj" "raw@address.net";

run_rules!(
    #{
        connect: [
            rule "test_new_address" || {
                let my_address = vsl::new_address("my@address.fqdn");

                try {
                    vsl::new_address("bad.address");
                    return vsl::deny()
                } catch {
                    return vsl::next()
                }
            },

            rule "test_address" || {
                let my_address = vsl::new_address("my@address.fqdn");

                print(my_address.to_string());
                print(my_address.to_debug());

                // check against a string & display.

                if my_address.to_string() is "my@address.fqdn"
                && my_address.to_debug() is "Address { full: \"my@address.fqdn\", at_sign: 2 }"
                && my_address is "my@address.fqdn"
                && my_address.local_part is "my"
                && my_address.domain is "address.fqdn"

                // check against another address.

                && ctx.mail_from is "mail.from@test.net"
                && ctx.mail_from not "not an email"
                && my_address.domain not ctx.mail_from
                && my_address.domain != ctx.mail_from
                && my_address.domain is "address.fqdn"
                && my_address.domain == "address.fqdn"

                // check against objects.

                && vsl::new_address("my@address.fqdn") not address_obj
                && address_obj not vsl::new_address("my@address.fqdn")
                && vsl::new_address("add@obj.net") is address_obj
                && address_obj is vsl::new_address("add@obj.net")

                && vsl::new_address("my@address.fqdn") not fqdn_obj
                && fqdn_obj not vsl::new_address("my@address.fqdn")
                && vsl::new_address("add@obj.net") is fqdn_obj
                && fqdn_obj is vsl::new_address("add@obj.net")

                && vsl::new_address("my@address.fqdn") not regex_obj
                && regex_obj not vsl::new_address("my@address.fqdn")
                && vsl::new_address("add@obj.com") is regex_obj
                && regex_obj is vsl::new_address("add@obj.com")

                && !(vsl::new_address("my@address.fqdn") in file_obj)
                && vsl::new_address("nested@address.com") in file_obj

                && !(vsl::new_address("my@address.fqdn") in group_obj)
                && vsl::new_address("nested@address.com") in group_obj

                && vsl::new_address("my@address.fqdn") not identifier_obj
                && identifier_obj not vsl::new_address("my@address.fqdn")
                && vsl::new_address("local_part@address.fqdn") is identifier_obj
                && identifier_obj is vsl::new_address("local_part@address.fqdn")

                && vsl::new_address("my@address.fqdn") not string_obj
                && string_obj not vsl::new_address("my@address.fqdn")
                && vsl::new_address("raw@address.net") is string_obj
                && string_obj not vsl::new_address("raw@address.net")

                {
                    vsl::next()
                } else {
                    vsl::deny()
                }
            },

            rule "test_not_valid_comparison" || {
                try {
                    vsl::new_address("raw@address.net") is obj ip4 "ip" "127.0.0.1";
                    return vsl::deny();
                } catch {}

                try {
                    vsl::new_address("raw@address.net") in obj addr "in_addr" "impossible@test.com";
                    return vsl::deny();
                } catch {}

                vsl::next()
            },

            rule "trailing" || vsl::accept(),
        ]
    }
)