// objects.vsl
// define objects to use in rules.

// standard object declaration.
object unspecified ip4 = #{
  value: "0.0.0.0",
  color: "bbf3ab"
};

object localhost ip4 = #{
  value: "127.0.0.1",
  color: "bbf3ab",
  description: "the localhost ip address"
};

// fully qualified domain name objects.
// NOTE: objects can be declared in an inline manner.
//       redefined objects are overwritten.
object inline_fqdn fqdn = "example.com";
object inline_fqdn fqdn = "xxx.com";
// object fqdn "invalid_fqdn" "foobar..com";

// variables, represent simple strings.
object user_dev val = "gitdev";
object user_prod val = "gitproduction";
object user_test val = "gittest";

// email addresses.
object jones address = "jones@foo.com";
object green address = "green@example.com";
// object address "invalid" "abc/.com";

// files object, format: `file:(content-type)`
// content-type can be: ip4, ip6, rg4, rg6, fqdn, str, address or regex.
object whitelist file:addr = "./src/rules/tests/configs/whitelist.txt";

// regex objects.
object bar_staff regex = "^[a-z0-9.]+@example.com$";
object localhost_emails regex = "^[a-z0-9.]+@localhost$";

// group objects, can store references to other objects,
// or store fresh objects.
// You can store and mix any type of object inside a group.
// when passed down into a check action, the whole group will
// be tested. The test stops when one of the groups content
// matches.
object authorized_users group = [
  whitelist,
  object authorized_ip ip4 = "1.1.1.1",
];

// groups can be nested into other groups.
object deep_group group = [
  object foo_emails regex = "^[a-z0-9.]+@foo.com$",
  authorized_users,
];

/// you can define custom code that you can use with `info!` & `deny!`.
object custom_code code = "220 this is a custom code.";

/// the complete code declaration enable automatic message folding.
object complete_code code = #{
  base: 220,
  enhanced: "2.0.0",
  text: "this is a long message, a very very long message ... carriage return will be properly added automaticaly.",
};

/// FIXME: add real example.
/// this will produce the following:
/// 220 2.0.0-this is a long message, a very very long message ...
/// 220 2.0.0 carriage return will be properly added automatically.
