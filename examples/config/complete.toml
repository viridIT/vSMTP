version_requirement = ">=0.9.2, <1.0.0"

[server]
## domain of the server send in the greetings
## (should be optional an use machine hostname if missing)
domain = "testserver.com"
## address ip for 'legacy' tcp socket
addr = "0.0.0.0:10025"
## address ip for submission tcp socket
## (= legacy socket + enhanced security verification in transactions)
addr_submission = "0.0.0.0:10587"
## address ip for tls tunneled tcp socket
## (= same as submission but under a tls protocol, a thus with no STARTTLS)
addr_submissions = "0.0.0.0:10465"
## number of thread available in the vsmtp's pool
thread_count = 10
## user used to run the deamon (when implemented)
vsmtp_user = "root"
## group used to run the deamon (when implemented)
vsmtp_group = "root"

[logs]
## current output are on the console and in this file
## (will change will 2 file, system and application in a near future)
file = "/var/log/vsmtp/vsmtp.log"

[logs.level]
## key=area, value=level
## control where and how much the logs are displayed
default = "warn"
receiver = "info"
resolver = "error"
rules = "warn"

[rules]
## entry point of the rule for the rule engine
main_filepath = "/etc/vsmtp/rules/main.vsl"

[[rules.services]]
## identifier of the service for the rules : `services.run("clamscan", ctx);`
name = "clamscan"
## type = only shell for now
type = "shell"
## the subprocess will run for max this amount of time (and receive a signal SIGCHLD)
timeout = "15s"
## program to execute
command = "/etc/vsmtp/rules/service/clamscan.sh"
## args for the executable
## {mail} will be remplaced by the mail received
args = "{mail}"

[[rules.services]]
name = "spamassassin"
type = "shell"
timeout = "15s"
command = "/etc/vsmtp/rules/service/spamassassin.sh"
args = "{mail}"
## optional user to run the program
user = "root"
## optional group to run the program
group = "root"

## smtps field is optional, if missing TLS or STARTLS is not available by the server
[smtps]
## should the clair communication be available ? values:["May", "Encrypt"]
security_level = "May"
## path for the certificate authorities ... (fixme ?)
capath = "./config/certs"
## should the server use his preferred cipher suite instead of the client's
preempt_cipherlist = true
## maximum delay for the tls handshake
handshake_timeout = "100ms"
## protocol supported by the server, values:["TLSv1.2", TLSv1.3]
protocol_version = ["TLSv1.3"]

## root's certificate
fullchain = "{capath}/certificate.crt"
## root's private key
private_key = "{capath}/privateKey.key"

## Server Name Identification is supported, specify your domain's in this array
## empty by default
[[smtps.sni_maps]]
domain = "testserver.com"
## {domain} is testserver.com here
fullchain = "{capath}/fullchain.{domain}.pem"
private_key = "{capath}/rsa.{domain}.pem"

[[smtps.sni_maps]]
domain = "testserver2.com"
## {domain} is testserver2.com here
fullchain = "{capath}/fullchain.{domain}.pem"
private_key = "{capath}/rsa.{domain}.pem"

[smtp]
## maximum receipent for each mail
rcpt_count_max = 25
## dislable the ehlo keyword, and thus esmtp
## will be improved with a more direct esmtp=["STARTTLS", "AUTH", "8BITMIME", ...] later
disable_ehlo = false

client_count_max = 16

## optional : specify the maximum delay for the next command for each step :
## after connecting, the server will close the connection unless HELO/EHLO is received
[smtp.timeout_client]
Connect = "50ms"
Helo = "100ms"
MailFrom = "200ms"
RcptTo = "400ms"
Data = "800ms"

[smtp.error]
## after {soft_count}, the server will delay the connection (by sleeping) for a {delay} duration
soft_count = 5
## after {hard_count}, the server will close the connection
hard_count = 10
delay = "5000ms"

## override your SMTP response in the table
## key are in ./src/smtp/code.rs
[reply_codes]
Code214 = "214 my custom help message\r\n"
Code220 = "220 {domain} ESMTP Service ready\r\n"

[delivery]
## path for the queues
spool_dir = "/var/spool/vsmtp"

[delivery.queues]
working = { capacity = 32 }
deliver = { capacity = 32 }
deferred = { retry_max = 10, cron_period = "10s" }
