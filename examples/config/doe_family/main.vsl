// Import the object file. The 'doe' prefix permits to distinguish Doe's family objects from others.
import "objects" as doe;
import "services" as services;

#{
  mail: [
    // NOTE: This is commented because I could not yet find a way to
    //       run automated test with file objects. Since the path must
    //       be absolute, it does not integrate well with unit tests.

    // rule "blacklist" || if ctx().mail_from.domain in doe::blacklist { deny() } else { next() }
    rule "blacklist" || if ctx().mail_from.domain == "spam-domain.org" { deny() } else { next() }
  ],

  rcpt: [
    // jane will always be added as a bcc when jenny is part of the recipients.
    action "bcc jenny" || if doe::jenny in ctx().rcpt_list { bcc(doe::jane) },

    // prevent delivery to untrusted domains using a regex.
    // you could also use the `check_relay` function in this case.
    action "do not deliver untrusted domains" || {
      if ctx().rcpt == doe::untrusted {
        disable_delivery(ctx().rcpt);
      }
    }
  ],

  // NOTE: this is commented because I could not yet find a way to
  //       run automated test with clamsmtpd running in the background.
  //       the following preq delegation is still valid, you can use it
  //       in you own scripts.

  // preq: [
  //   delegate services::clamsmtpd "antivirus" || {
  //     // clamav inserts the 'X-Virus-Infected' header
  //     // once a virus is detected.
  //     if has_header("X-Virus-Infected") {
  //       quarantine("virus_q")
  //     } else {
  //       next()
  //     }
  //   }
  // ]

  delivery: [
    action "setup delivery" ||
      // we loop over all recipients and deliver localy if any of them is part of the family.
      // otherwise, we simply deliver the email over SMTP.
      for rcpt in ctx().rcpt_list {
        if rcpt in doe::family_addr { maildir(rcpt) } else { deliver(rcpt) }
      }
  ],
}
