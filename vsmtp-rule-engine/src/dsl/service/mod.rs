/*
 * vSMTP mail transfer agent
 * Copyright (C) 2022 viridIT SAS
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see https://www.gnu.org/licenses/.
 *
*/

mod databases;
pub mod parsing;

use vsmtp_common::{
    mail_context::{AuthCredentials, Body, MailContext},
    re::{anyhow, log},
};
use vsmtp_config::re::users;

use crate::log_channels;

#[derive(Debug)]
enum Service {
    /// A service can be a program to run in a subprocess
    UnixShell {
        /// a duration after which the subprocess will be forced-kill
        timeout: std::time::Duration,
        /// optional: a user to run the subprocess under
        user: Option<String>,
        /// optional: a group to run the subprocess under
        group: Option<String>,
        /// the command to execute in the subprocess
        command: String,
        /// optional: parameters directly given to the executed program (argc, argv)
        args: Option<String>,
    },

    /// a database connector based on the csv file format.
    CSVDatabase {
        /// a path to the file to open.
        connector: std::path::PathBuf,
        /// access mode to the database.
        access: databases::AccessMode,
        /// does the database need to be refreshed for each call ?
        refresh: bool,
        /// the pattern separating elements of each rows.
        pattern: String,
    },
}

/// Output generated by a service (shell)
#[allow(clippy::module_name_repetitions)]
#[derive(Debug, Clone, Copy)]
pub struct ServiceResult {
    // TODO: do we want ? ExitStatus or Output ? see Child::wait_with_output
    status: std::process::ExitStatus,
}

impl ServiceResult {
    pub const fn new(status: std::process::ExitStatus) -> Self {
        Self { status }
    }

    pub fn has_code(self) -> bool {
        self.get_code().is_some()
    }

    pub fn get_code(self) -> Option<i64> {
        self.status.code().map(i64::from)
    }

    pub fn has_signal(self) -> bool {
        self.get_signal().is_some()
    }

    pub fn get_signal(self) -> Option<i64> {
        std::os::unix::prelude::ExitStatusExt::signal(&self.status).map(i64::from)
    }
}

impl std::fmt::Display for ServiceResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_fmt(format_args!("{}", self.status))
    }
}

// /// run the service using an email context.
// /// # Errors
// ///
// /// * if the user used to launch commands is not found.
// /// * if the group used to launch commands is not found.
// /// * if the shell service failed to spawn.
// /// * if the shell returned an error.
// pub fn run(this: &Service, ctx: &MailContext) -> anyhow::Result<ServiceResult> {
//     let body = match &ctx.body {
//         Body::Empty => "".to_string(),
//         Body::Raw(raw) => raw.clone(),
//         Body::Parsed(parsed) => parsed.to_raw(),
//     };

//     match this {
//         Service::UnixShell {
//             timeout,
//             command,
//             args,
//             user,
//             group,
//             ..
//         } => {
//             let mut child = std::process::Command::new(command);
//             if let Some(args) = args {
//                 for i in args.split_whitespace() {
//                     child.arg(
//                         i.replace("{mail}", &body)
//                             .replace(
//                                 "{authid}",
//                                 ctx.connection.credentials.as_ref().map_or("", |c| match c {
//                                     AuthCredentials::Query { authid }
//                                     | AuthCredentials::Verify { authid, .. } => authid,
//                                 }),
//                             )
//                             .replace(
//                                 "{authpass}",
//                                 ctx.connection
//                                     .credentials
//                                     .as_ref()
//                                     .and_then(|c| match c {
//                                         AuthCredentials::Verify { authpass, .. } => Some(authpass),
//                                         AuthCredentials::Query { .. } => None,
//                                     })
//                                     .unwrap_or(&"".to_string()),
//                             ),
//                     );
//                 }
//             }

//             if let Some(user_name) = user {
//                 if let Some(user) = users::get_user_by_name(&user_name) {
//                     std::os::unix::prelude::CommandExt::uid(&mut child, user.uid());
//                 } else {
//                     anyhow::bail!("UnixShell user not found: '{user_name}'")
//                 }
//             }
//             if let Some(group_name) = group {
//                 if let Some(group) = users::get_group_by_name(group_name) {
//                     std::os::unix::prelude::CommandExt::gid(&mut child, group.gid());
//                 } else {
//                     anyhow::bail!("UnixShell group not found: '{group_name}'")
//                 }
//             }

//             log::trace!(
//                 target: log_channels::SERVICES,
//                 "running command: {:#?}",
//                 child
//             );

//             let mut child = match child.spawn() {
//                 Ok(child) => child,
//                 Err(err) => anyhow::bail!("UnixShell process failed to spawn: {err:?}"),
//             };

//             let status = match wait_timeout::ChildExt::wait_timeout(&mut child, *timeout) {
//                 Ok(status) => status.unwrap_or_else(|| {
//                     child.kill().expect("child has already exited");
//                     child.wait().expect("command wasn't running")
//                 }),

//                 Err(err) => anyhow::bail!("UnixShell unexpected error: {err:?}"),
//             };

//             Ok(ServiceResult::new(status))
//         }
//         Service::CSVDatabase { .. } => {
//             anyhow::bail!("a csv database is not a runnable service, use a db object to query data")
//         }
//     }
// }
