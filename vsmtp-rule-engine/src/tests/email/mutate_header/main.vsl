fn mutate_headers(ctx) {
    add_header("X-New-Header", "value of header");
    add_header("X-Another-Header", "value of another");
    add_header("From", "<john@doe.com>");
    add_header("To", "<green@foo.net>");

    if !has_header("X-New-Header")
    || !has_header("X-Another-Header")
    || !has_header("From")
    || !has_header("To")
    {
        return deny();
    }

    set_header("X-New-Header", "new value!");
    set_header("X-Yet-Another-Header", "adding to header section when not found");

    print(get_header("X-New-Header"));

    if !has_header("X-New-Header")
    || !has_header("X-Yet-Another-Header")
    {
        return deny();
    }

    if get_header("X-New-Header") == "new value!"
    && get_header("X-Another-Header") == "value of another"
    && get_header("From") == "<john@doe.com>"
    && get_header("To") == "<green@foo.net>"
    && get_header("X-Yet-Another-Header") == "adding to header section when not found"
    {
        next()
    } else {
        deny()
    }
}

#{
    connect: [
        rule "adding headers when body is empty" || mutate_headers(ctx),
        rule "trailing" || accept(),
    ],

    preq: [
        rule "adding headers to raw email" || mutate_headers(ctx),
        rule "trailing" || accept(),
    ],

    postq: [
        rule "adding headers to parsed email" || mutate_headers(ctx),
        rule "trailing" || accept(),
    ],
}
